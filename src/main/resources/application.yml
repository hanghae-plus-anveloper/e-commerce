spring:
  application:
    name: hhplus
  profiles:
    active: local

  datasource:
    name: HangHaePlusDataSource
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 10000
      max-lifetime: 1_800_000
      keepalive-time: 300_000
      initialization-fail-timeout: 0

  jpa:
    open-in-view: false
    generate-ddl: true # hibernate에 스키마 생성 위임
    show-sql: false
    hibernate:
      ddl-auto: create-drop # 프로젝트 실행 시 테이블 생성 및 종료 시 삭제
    properties:
      hibernate.timezone.default_storage: NORMALIZE_UTC
      hibernate.jdbc.time_zone: UTC

  cache:
    type: redis
    redis:
      time-to-live: 600000 # 기본 TTL 10분(ms)
      cache-null-values: false
      use-key-prefix: true

  kafka:
    bootstrap-servers: localhost:9092

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

      acks: 'all'
      linger-ms: 5
      batch-size: 32768
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5

    properties:
      spring.json.add.type.headers: false
      spring.json.trusted.packages: "kr.hhplus.*"

    # 테스트/로컬 확인용
    consumer:
      group-id: order-consumer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "kr.hhplus.*"
        spring.json.value.default.type: "kr.hhplus.be.server.kafka.message.OrderCompletedMessage"
      auto-offset-reset: earliest
      enable-auto-commit: true

app:
  kafka:
    topics:
      order-completed: order.completed.v1 # 주문 생성 토픽
      coupon-pended: coupon.pended.v1 # 쿠폰 대기열 적재 토픽
    partitions:
      order-completed: 3
      coupon-pended: 3
    consumer-group:
      order: order-consumer
      coupon: coupon-consumer
  test:
    kafka:
      consumer-group:
        order: order-consumer
        coupon: coupon-consumer

---
spring.config.activate.on-profile: local

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/hhplus?characterEncoding=UTF-8&serverTimezone=UTC
    username: application
    password: application

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2s

  redis:
    redisson:
      config: |
        singleServerConfig:
          address: "redis://127.0.0.1:6379"
          database: 0
          connectionMinimumIdleSize: 8
          connectionPoolSize: 32
          timeout: 10000
        threads: 8
        nettyThreads: 8
